# Wordle

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Wordle

In your existing [Games](./games_setup.livemd) project, you're going to create a Wordle game.

Wordle is a popular game where players get six attempts to guess a word.
They are given feedback clues to guess the word.

* **Green** if the letter is in the word and in the correct spot.
* **Yellow** if the letter is in the word but in the incorrect spot.
* **Gray** if the letter is not in the word.

For example for the word "TOAST" the guess "TARTS" would be

```mermaid
flowchart LR
style 1 fill:green
style 2 fill:yellow
style 3 fill:gray
style 4 fill:yellow
style 5 fill:yellow

1[T] --- 2[A] --- 3[R] --- 4[T] --- 5[S]
```

You should be able to start your project by running the following from the `game` folder in
the command line.

```
iex -S mix
```

Given an answer and a guess, your `Games.Wordle` module will provide feedback as a list of color atoms `:green`, `:yellow`, and `:grey`.

<!-- livebook:{"force_markdown":true} -->

```elixir
                         #answer   #guess
iex> Games.Wordle.feedback("aaaaa", "aaaaa")
[:green, :green, :green, :green, :green]

iex> Games.Wordle.feedback("aaaaa", "aaaab")
[:green, :green, :green, :green, :grey]

iex> Games.Wordle.feedback("abdce", "edcba")
[:yellow, :yellow, :yellow, :yellow, :yellow]

# If there are duplicate characters in the guess prioritize exact matches.
iex> Games.Wordle.feedback("aaabb", "xaaaa")
[:grey, :green, :green, :yellow, :grey]
```

Test and implement a `Games.Wordle` module in your [Games](./games_setup.livemd) project.

<!-- livebook:{"break_markdown":true} -->

### Bonus: Random Word

Use the IEx shell to start a game of Wordle.

```
iex> Games.Wordle.start()
Enter a five letter word:  
```

Randomly generate a word for the wordle game. Retrieve user input and provide feedback based
on their guess. For example, this would be the output if the word `toast` were randomly generated.

```
Enter a give letter word: tarts
[:green, :yellow, :grey, :yellow, :yellow]
```

```elixir
answer = String.split("aazxx", "", trim: true)
guess = String.split("aajax", "", trim: true)
IO.inspect(answer)
IO.inspect(guess)
map_guess = Enum.sort(Enum.frequencies(guess))
IO.inspect(map_guess)
map_answer = Enum.sort(Enum.frequencies(answer))
IO.inspect(map_answer)
IO.inspect(Enum.at(map_guess, 4) <= Enum.at(map_answer, 4))

for each <- guess do
  Enum.member?(answer, each)
end
```

```elixir
answer = String.split("aazex", "", trim: true)
guess = String.split("aazya", "", trim: true)

result =
  for each <- guess do
    Enum.member?(answer, each)
  end

map_guess = Enum.sort(Enum.frequencies(guess))
map_answer = Enum.sort(Enum.frequencies(answer))

for x <- 0..4 do
  cond do
    Enum.at(answer, x) != Enum.at(guess, x) and Enum.at(result, x) == true -> :yellow
    Enum.at(answer, x) == Enum.at(guess, x) -> :green
    Enum.at(result, x) == false -> :grey
  end
end
```

```elixir
defmodule WordleTest do
  use ExUnit.Case

  test "feedback/2 all green" do
    assert Games.Wordle.feedback("aaaaa", "aaaaa") ==
             [:green, :green, :green, :green, :green]

    assert Games.Wordle.feedback("koala", "koala") ==
             [:green, :green, :green, :green, :green]
  end

  test "feedback/2 all grey" do
    assert Games.Wordle.feedback("lapse", "quick") ==
             [:grey, :grey, :grey, :grey, :grey]
  end

  test "feedback/2 all yellow" do
    assert Games.Wordle.feedback("lapse", "alsep") ==
             [:yellow, :yellow, :yellow, :yellow, :yellow]
  end

  test "feedback/2 3 greens 2 yellows" do
    assert Games.Wordle.feedback("lapse", "lapes") ==
             [:green, :green, :green, :yellow, :yellow]
  end

  test "feedback/2 4 grays 1 yellow" do
    assert Games.Wordle.feedback("lapse", "xzwts") ==
             [:grey, :grey, :grey, :grey, :yellow]
  end

  test "feedback/2 3 grays 2 yellows" do
    assert Games.Wordle.feedback("lapse", "xzwas") ==
             [:grey, :grey, :grey, :yellow, :yellow]
  end

  test "feedback/2 3 greens 2 grays" do
    assert Games.Wordle.feedback("lapse", "lapzq") ==
             [:green, :green, :green, :grey, :grey]
  end

  test "feedback/2 2 greens 2 yellows 1 gray" do
    assert Games.Wordle.feedback("lapse", "laspw") ==
             [:green, :green, :yellow, :yellow, :grey]
  end

  test "feedback/2 excess match letters are grey" do
    assert Games.Wordle.feedback("aaaxx", "aaaax") ==
             [:green, :green, :green, :grey, :green]
  end
end
```

```elixir
defmodule Games.Wordle do
  def feedback(answer, guess) when answer == guess do
    [:green, :green, :green, :green, :green]
  end

  def feedback(answer, guess) do
    answer = String.split(answer, "", trim: true)
    guess = String.split(guess, "", trim: true)

    result =
      for each <- guess do
        Enum.member?(answer, each)
      end

    word_length = length(guess) - 1

    for x <- 0..word_length do
      cond do
        Enum.at(answer, x) != Enum.at(guess, x) and Enum.at(result, x) == true -> :yellow
        Enum.at(answer, x) == Enum.at(guess, x) -> :green
        Enum.at(result, x) == false -> :grey
      end
    end
  end
end
```

### Bonus: Six Guesses

After six guesses, the player should lose the game if they do not get the correct answer.

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish wordle application exercise"
```

## Up Next

| Previous                                             | Next                                   |
| ---------------------------------------------------- | -------------------------------------: |
| [ExUnit With Mix](../reading/exunit_with_mix.livemd) | [Doctests](../reading/doctests.livemd) |
