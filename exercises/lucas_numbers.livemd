# Lucas Numbers

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Lucas Numbers

This exercise was inspired by [Exercism.io](https://exercism.org/tracks/elixir/exercises/lucas-numbers). It's a fantastic platform for learning many languages including Elixir.

Lucas numbers are much like the fibonacci sequence where $fib(n) = fib(n - 1) + fib(n - 2)$
Numberphile has a great video that explains them in further detail,

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=PeUbRXnbmms\")","title":"Lucas Numbers"},"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=PeUbRXnbmms")
```

Unlike Fibonacci, they start with a different initial 2 numbers.

Commonly it will start with `2, 1`, so:

```mermaid
flowchart LR
  2 --> 1 --> 3 --> 4 --> 7 --> 11 --> 18 --> 29 --> ...
```

Other than starting with two different numbers, the formula for a lucas number is still
$L(n)=L(n-1)+L(n - 2)$.

In addition to generating the $nth$ lucas number, you're also going to generate a sequence of lucas numbers.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule Lucas do

  def number(1), do: 2
  def number(2), do: 1

  def number(n) do
    number(n - 1) + number(n - 2)
  end

  def sequence(length) do
    Enum.map(1..length, &number/1)
  end
end

Lucas.sequence(10)
```

To avoid recomputing lucas numbers over and over, we can implement `sequence/1` using [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) instead.

```elixir
def sequence(length) do
  {_, _, list} =
    Enum.reduce(2..length, {2, 1, [1, 2]}, fn each, {prev2, prev1, list} ->
      current = prev2 + prev1
      {prev1, current, [current | list]}
    end)

  Enum.reverse(list)
end
```

</details>

Implement the `Lucas` module as documented.

```elixir
defmodule Lucas do
  @doc """
  return the nth lucas number.

  ## Examples

    iex> Lucas.number(1)
    2

    iex> Lucas.number(2)
    1

    iex> Lucas.number(3)
    3

    iex> Lucas.number(4)
    4
    
    iex> Lucas.number(5)
    7

    iex> Lucas.number(6)
    11

    iex> Lucas.number(20)
    9349
  """

  def of(n) when n == 1 do
    IO.inspect("calculating 1*")
    0
  end

  def of(n) when n == 2 do
    IO.inspect("calculating 2**")
    1
  end

  def of(n) do
    IO.inspect("calculating #{n}")
    of(n - 1) + of(n - 2)
  end

  @doc """
  Generate a list of lucas numbers with the given length.

  ## Examples

    iex> Lucas.sequence(1)
    [2]

    iex> Lucas.sequence(2)
    [2, 1]

    iex> Lucas.sequence(3)
    [2, 1, 3]

    iex> Lucas.sequence(4)
    [2, 1, 3, 4]

    iex> Lucas.sequence(10)
    [2, 1, 3, 4, 7, 11, 18, 29, 47, 76]
  """

  def sequence(length) do
    Enum.map(1..length, fn elem ->
      of(elem)
    end)
  end
end

Lucas.sequence(6)
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish lucas numbers exercise"
```

## Up Next

| Previous                                   | Next                                       |
| ------------------------------------------ | -----------------------------------------: |
| [Fibonacci](../exercises/fibonacci.livemd) | [Factorial](../exercises/factorial.livemd) |
