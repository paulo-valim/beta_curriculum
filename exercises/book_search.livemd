# Book Search

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Book Search

You are building an application for searching books.

Represent each book as a `Book` struct with `title` and `content` keys. Then create a `Book.search/2` function to filter a list of Book structs as documented in the `Book` module below.

```elixir
defmodule Book do
  @moduledoc """
  Documentation for `Book`.

  ## Examples

    iex> %Book{title: "My Book Title"}
    %Book{title: "My Book Title"}
  """
  defstruct title: "My Book Title", content: "Once upon a time"

  @doc """
  Search a list of Book structs. Search should match any book that includes the
  filter in their title.

  ## Examples

  Include books that exactly match the search query.

    iex> book1 = %Book{title: "A"}
    iex> book2 = %Book{title: "B"}
    iex> book3 = %Book{title: "C"}
    iex> Book.search([book1, book2, book3], "A")
    [%Book{title: "A"}]

  Include books that partially match the search query.

    iex> Book.search([%Book{title: "ABC"}], "A")
    [%Book{title: "ABC"}]

    iex> Book.search([%Book{title: "BAC"}], "A")
    [%Book{title: "BAC"}]

  Search should be case insensitive.

    iex> Book.search([%Book{title: "ABC"}], "a")
    [%Book{title: "ABC"}]
  """

  def search(books, query) do
    Enum.filter(
      books,
      fn books ->
        String.contains?(String.downcase(books.title), String.downcase(query))
      end
    )
  end
end
```

```elixir
book1 = %Book{title: "A", content: "Z"}
book2 = %Book{title: "ABC", content: "XYZ"}
book3 = %Book{title: "DEF", content: "MNO"}

Book.search([book1, book2, book3], "a")
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish book search exercise"
```

## Up Next

| Previous                                                 | Next                                                               |
| -------------------------------------------------------- | -----------------------------------------------------------------: |
| [Animal Generator](../exercises/animal_generator.livemd) | [Filter Values By Type](../exercises/filter_values_by_type.livemd) |
