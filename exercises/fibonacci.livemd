# Fibonacci Sequence

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:benchee, "~> 1.1"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Fibonacci Sequence

The Fibonacci Sequence is a series of the following numbers.

```mermaid
flowchart LR
a[0] --> b[1] --> c[1] --> d[2] --> e[3] --> f[5] --> g[8] --> h[13] --> i[21] --> k[34] --> ...
```

<!-- livebook:{"break_markdown":true} -->

It's created by taking the sum of the previous to numbers to get the next number.

So $fib(n) = fib(n-1) + fib(n - 2)$

You'll notice that this is a recursive function. You're going to create a `Fibonacci` module that can generate the $nth$ fibonacci number.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule Fibonacci do
  def of(1), do: 0
  def of(2), do: 1

  def of(n) do
    of(n - 1) + of(n - 2)
  end
end
```

</details>

Implement the `Fibonacci` module as documented.

```elixir
defmodule Fibonacci do
  @moduledoc """
  Documentation for the `Fibonacci` module.
  """

  @doc """
  Generate the nth fibonacci number.

  ## Examples

    iex> Fibonacci.of(1)
    0

    iex> Fibonacci.of(2)
    1

    iex> Fibonacci.of(3)
    1

    iex> Fibonacci.of(4)
    2

    iex> Fibonacci.of(5)
    3

    iex> Fibonacci.of(6)
    5

    iex> Fibonacci.of(7)
    8

    iex> Fibonacci.of(20)
    4181
  """
  def of(n) when n == 1 do
    IO.inspect("calculating 1*")
    0
  end

  def of(n) when n == 2 do
    IO.inspect("calculating 2**")
    1
  end

  def of(n) do
    IO.inspect("calculating #{n}")
    of(n - 1) + of(n - 2)
  end
end

Fibonacci.of(6)
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish fibonacci exercise"
```

## Up Next

| Previous                                 | Next                                               |
| ---------------------------------------- | -------------------------------------------------: |
| [Recursion](../reading/recursion.livemd) | [Lucas Numbers](../exercises/lucas_numbers.livemd) |
