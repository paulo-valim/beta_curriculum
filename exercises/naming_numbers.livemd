# Naming Numbers

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Naming Numbers

In the Elixir cell below, create a function `naming_numbers` which accepts a
single digit integer and returns its string representation. So `1` would become `"one"`.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
   0 --> zero
   1 --> one
   2 --> two
   3 --> three
   4 --> four
   5 --> five
   6 --> six
   7 --> seven
   8 --> eight
   9 --> nine
```

<!-- livebook:{"break_markdown":true} -->

<!-- livebook:{"force_markdown":true} -->

```elixir
naming_numbers.(1)
"one"
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
  <summary>Solution Example</summary>

  ```elixir
  naming_numbers = fn integer ->
    case integer do
      0 -> "zero"
      1 -> "one"
      2 -> "two"
      3 -> "three"
      4 -> "four"
      5 -> "five"
      6 -> "six"
      7 -> "seven"
      8 -> "eight"
      9 -> "nine"
    end
  end
  ```
</details>

Enter your solution below.

```elixir
naming_number = fn int ->
  cond do
    int == 1 -> "one"
    int == 2 -> "two"
    int == 3 -> "three"
    int == 4 -> "four"
    int == 5 -> "five"
    int == 6 -> "six"
    int == 7 -> "seven"
    int == 8 -> "eight"
    int == 9 -> "nine"
    true -> raise "choose a number between 1 and 9"
  end
end

naming_number.(10)
```

## Numbering Names

In the Elixir cell below, create a function `numbering_names` which accepts a
number's name and returns its string representation. So `"one"` would become `1`.

In addition to accepting lowercase name, also accept uppercase names so `"One"` would become `1`.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
  zero --> 0
  one --> 1
  two --> 2
  three --> 3
  four --> 4
  five --> 5
  six --> 6
  seven --> 7
  eight --> 8
  nine --> 9
```

```mermaid
flowchart
  Zero --> 0
  One --> 1
  Two --> 2
  Three --> 3
  Four --> 4
  Five --> 5
  Six --> 6
  Seven --> 7
  Eight --> 8
  Nine --> 9
```

<!-- livebook:{"break_markdown":true} -->

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
  <summary>Solution Example</summary>


  We can brute force the solutione using case.

  ```elixir
  numbering_names = fn int_str ->
    case int_str do
      "zero" -> 0
      "one" -> 1
      "two" -> 2
      "three" -> 3
      "four" -> 4
      "five" -> 5
      "six" -> 6
      "seven" -> 7
      "eight" -> 8
      "nine" -> 9
      "Zero" -> 0
      "One" -> 1
      "Two" -> 2
      "Three" -> 3
      "Four" -> 4
      "Five" -> 5
      "Six" -> 6
      "Seven" -> 7
      "Eight" -> 8
      "Nine" -> 9
    end
  end
  ```

  Or use [String.downcase/2](https://hexdocs.pm/elixir/String.html#downcase/2) to make the solutione more concise.
  This has the added benefit of handling mixed case such as `"ZeRO"`.

  ```elixir
  numbering_names = fn int_str ->
    case String.downcase(int_str) do
      "zero" -> 0
      "one" -> 1
      "two" -> 2
      "three" -> 3
      "four" -> 4
      "five" -> 5
      "six" -> 6
      "seven" -> 7
      "eight" -> 8
      "nine" -> 9
    end
  end
  ```
</details>

```elixir
numbering_names = fn number ->
  cond do
    number == "one" || number == "One" -> 1
    number == "two" || number == "Two" -> 2
    number == "three" || number == "Three" -> 3
    number == "four" || number == "Four" -> 4
    number == "five" || number == "Five" -> 5
    number == "six" || number == "Six" -> 6
    number == "seven" || number == "Seven" -> 7
    number == "eight" || number == "Eight" -> 8
    number == "nine" || number == "Nine" -> 9
  end
end

numbering_names.("two")
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish naming numbers exercise"
```

## Up Next

| Previous                                       | Next                                                           |
| ---------------------------------------------- | -------------------------------------------------------------: |
| [Control Flow](../reading/control_flow.livemd) | [Rock Paper Scissors](../exercises/rock_paper_scissors.livemd) |
